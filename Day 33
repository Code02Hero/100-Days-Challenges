#include <stdio.h>

// Binary Search Function
int binarySearch(int arr[], int low, int high, int key) {
    while (low <= high) {
        int mid = low + (high - low) / 2;

        // Check if key is present at mid
        if (arr[mid] == key)
            return mid;

        // If key is greater, ignore the left half
        if (arr[mid] < key)
            low = mid + 1;
        // If key is smaller, ignore the right half
        else
            high = mid - 1;
    }
    return -1; // Key not found
}

// Interpolation Search Function
int interpolationSearch(int arr[], int n, int key) {
    int low = 0, high = n - 1;

    while (low <= high && key >= arr[low] && key <= arr[high]) {
        if (low == high) {
            if (arr[low] == key) return low;
            return -1;
        }

        // Probing the position with interpolation formula
        int pos = low + (((double)(high - low) / (arr[high] - arr[low])) * (key - arr[low]));

        // Check if key is present at pos
        if (arr[pos] == key)
            return pos;

        // If key is larger, key is in the upper part
        if (arr[pos] < key)
            low = pos + 1;
        // If key is smaller, key is in the lower part
        else
            high = pos - 1;
    }
    return -1; // Key not found
}

int main() {
    int arr[] = {10, 22, 35, 40, 45, 50, 55, 60, 75, 80, 82, 90, 100};
    int n = sizeof(arr) / sizeof(arr[0]);
    int key = 55;

    // Binary Search
    int binaryResult = binarySearch(arr, 0, n - 1, key);
    (binaryResult != -1) ? printf("Binary Search: Element found at index %d\n", binaryResult)
                         : printf("Binary Search: Element not found\n");

    // Interpolation Search
    int interpolationResult = interpolationSearch(arr, n, key);
    (interpolationResult != -1) ? printf("Interpolation Search: Element found at index %d\n", interpolationResult)
                                : printf("Interpolation Search: Element not found\n");

    return 0;
}
